// Demo System for Aura Bridge AI
// This creates a comprehensive demo showcasing the AI-powered robot translation

const DEMO_SYSTEM = {
  // Demo gesture patterns
  patterns: {
    circle: [
      { x: 0.3, y: 0.0, z: -0.8 },
      { x: 0.2, y: 0.2, z: -0.8 },
      { x: 0.0, y: 0.3, z: -0.8 },
      { x: -0.2, y: 0.2, z: -0.8 },
      { x: -0.3, y: 0.0, z: -0.8 },
      { x: -0.2, y: -0.2, z: -0.8 },
      { x: 0.0, y: -0.3, z: -0.8 },
      { x: 0.2, y: -0.2, z: -0.8 },
      { x: 0.3, y: 0.0, z: -0.8 }
    ],
    
    square: [
      { x: 0.2, y: 0.2, z: -0.8 },
      { x: 0.4, y: 0.2, z: -0.8 },
      { x: 0.4, y: 0.4, z: -0.8 },
      { x: 0.2, y: 0.4, z: -0.8 },
      { x: 0.2, y: 0.2, z: -0.8 }
    ],
    
    wave: [
      { x: -0.3, y: 0.0, z: -0.8 },
      { x: -0.2, y: 0.1, z: -0.8 },
      { x: -0.1, y: -0.1, z: -0.8 },
      { x: 0.0, y: 0.1, z: -0.8 },
      { x: 0.1, y: -0.1, z: -0.8 },
      { x: 0.2, y: 0.1, z: -0.8 },
      { x: 0.3, y: 0.0, z: -0.8 }
    ],
    
    spiral: [
      { x: 0.0, y: 0.0, z: -0.8 },
      { x: 0.1, y: 0.0, z: -0.7 },
      { x: 0.1, y: 0.1, z: -0.6 },
      { x: 0.0, y: 0.2, z: -0.5 },
      { x: -0.1, y: 0.1, z: -0.4 },
      { x: -0.2, y: 0.0, z: -0.3 },
      { x: -0.1, y: -0.1, z: -0.2 },
      { x: 0.0, y: -0.2, z: -0.1 },
      { x: 0.1, y: -0.1, z: 0.0 }
    ]
  },

  // Generate robot code for different patterns
  generateCode: (pattern, robotType) => {
    const timestamp = new Date().toISOString()
    const points = DEMO_SYSTEM.patterns[pattern] || DEMO_SYSTEM.patterns.circle
    
    if (robotType === 'rapid') {
      return `MODULE AuraBridge${pattern.charAt(0).toUpperCase() + pattern.slice(1)}
! Generated by Aura Bridge AI Demo
! Pattern: ${pattern}
! Timestamp: ${timestamp}

PROC main()
    ! ${pattern.charAt(0).toUpperCase() + pattern.slice(1)} pattern execution
${points.map((p, i) => 
  `    MoveL [${Math.round(p.x * 1000)}, ${Math.round(p.y * 1000)}, ${Math.round(p.z * 1000)}], v100, fine, tool0;`
).join('\n')}
ENDPROC

ENDMODULE`
    }
    
    if (robotType === 'karel') {
      return `PROGRAM AURA_BRIDGE_${pattern.toUpperCase()}
  ! Auto-generated FANUC KAREL demo
  ! Pattern: ${pattern}
  ! Timestamp: ${timestamp}
  
${points.map((p, i) => 
  `  L P[${i + 1}] X ${(p.x * 1000).toFixed(3)} Y ${(p.y * 1000).toFixed(3)} Z ${(p.z * 1000).toFixed(3)} FINE`
).join('\n')}
END`
    }
    
    if (robotType === 'krl') {
      return `DEF AURA_BRIDGE_${pattern.toUpperCase()}()
  ; Auto-generated KUKA KRL demo
  ; Pattern: ${pattern}
  ; Timestamp: ${timestamp}
  
${points.map((p, i) => 
  `  LIN {X ${(p.x * 1000).toFixed(3)}, Y ${(p.y * 1000).toFixed(3)}, Z ${(p.z * 1000).toFixed(3)}} C_DIS`
).join('\n')}
END`
    }
    
    return 'Demo code generation failed'
  },

  // Get pattern info
  getPatternInfo: (pattern) => {
    const info = {
      circle: { name: 'Circle', description: 'Smooth circular motion pattern', complexity: 'Simple' },
      square: { name: 'Square', description: 'Precise rectangular path', complexity: 'Medium' },
      wave: { name: 'Wave', description: 'Sinusoidal wave motion', complexity: 'Medium' },
      spiral: { name: 'Spiral', description: 'Ascending spiral pattern', complexity: 'Advanced' }
    }
    return info[pattern] || info.circle
  }
}

// Export for use in React components
export default DEMO_SYSTEM
